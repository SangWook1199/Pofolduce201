<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kosa._musketeers.mapper.ReviewBoardMapper">

	<select id="getReviewPostList" parameterType="map"
		resultMap="reviewPostBoardResultMap">
		SELECT
		review_post_id,
		title,
		view_count,
		create_date,
		users.user_id,
		users.nickname
		FROM
		review_post JOIN users on
		review_post.user_id = users.user_id
		ORDER BY create_date DESC
		LIMIT
		#{count} OFFSET #{start};
	</select>

	<resultMap type="org.kosa._musketeers.domain.ReviewPost"
		id="reviewPostBoardResultMap">
		<result column="user_id" property="user.userId" />
		<result column="nickname" property="user.nickname" />
	</resultMap>

	<select id="getTotalReviewPostCount" resultType="int">
		SELECT COUNT(1)
		FROM review_post;
	</select>

	<select id="getBestReviewPostList" parameterType="map"
		resultMap="reviewPostBoardResultMap">
		SELECT
		review_post_id,
		title,
		view_count,
		create_date,
		users.user_id,
		users.nickname
		FROM
		review_post JOIN users on
		review_post.user_id = users.user_id
		ORDER BY like_count DESC
		LIMIT 3;
	</select>

	<insert id="createPost" parameterType="map">
		INSERT INTO
		review_post(title, post_html, portfolio_html, user_id)
		VALUE(#{title},
		#{postHtml}, #{portfolioHtml}, #{user.userId});
	</insert>

	<select id="getReviewPostByReviewPostId" parameterType="int"
		resultMap="viewReviewPostResultMap">
		SELECT review_post_id, title, post_html, portfolio_html,
		view_count,
		create_date, like_count, users.user_id, nickname, user_image_location
		FROM
		review_post JOIN users on review_post.user_id=users.user_id
		WHERE
		review_post_id=#{reviewPostId};
	</select>

	<resultMap type="org.kosa._musketeers.domain.ReviewPost"
		id="viewReviewPostResultMap">
		<result column="user_id" property="user.userId" />
		<result column="nickname" property="user.nickname" />
		<result column="user_image_location" property="user.userImageLocation" />
	</resultMap>

	<update id="updateReviewPostViewCount" parameterType="int">
		UPDATE
		review_post
		SET view_count=view_count+1
		WHERE
		review_post_id=#{reviewPostId}
	</update>

	<delete id="delteReviewPost" parameterType="int">
		DELETE
		FROM
		review_post
		WHERE review_post_id=${reviewPostId}
	</delete>

	<update id="updateReviewPostByReviewId"
		parameterType="org.kosa._musketeers.domain.ReviewPost">
		UPDATE review_post
		SET title=#{title},
		post_html=#{postHtml}
		WHERE review_post_id=#{reviewPostId}
	</update>

	<insert id="createReviewPostComment"
		parameterType="org.kosa._musketeers.domain.ReviewPostComment">
		INSERT review_post_comments(comments_contents, user_id,
		review_post_id)
		VALUES(#{commentsContents}, #{userId.userId},
		#{reviewPostId})
	</insert>
	
	<select id="getTotalReviewCommentCount" resultType="int">
		SELECT count(1)
		FROM review_post_comments
		WHERE review_post_id=#{reviewPostId}
	</select>
	
	<select id="getReviewCommentListByReviewPostId"
		parameterType="int"
		resultType="org.kosa._musketeers.domain.ReviewPostComment"
		resultMap="getReviewCommentListByReviewPostIdResultMap">
		SELECT comments_id, comments_contents, comments_date,
		review_post_id,
		users.user_id, users.nickname, users.user_image_location
		FROM review_post_comments
		JOIN users ON
		review_post_comments.user_id=users.user_id
		WHERE
		review_post_id=#{reviewPostId}
		ORDER BY comments_date DESC
		LIMIT #{count} OFFSET #{start}
	</select>

	<resultMap
		type="org.kosa._musketeers.domain.ReviewPostComment"
		id="getReviewCommentListByReviewPostIdResultMap">
		<result column="user_id" property="userId.userId" />
		<result column="nickname" property="userId.nickname" />
		<result column="user_image_location" property="userId.userImageLocation" />
	</resultMap>
	
	<update id="updateReviewComment">
		UPDATE review_post_comments
		SET comments_contents=#{commentsContents}
		WHERE comments_id=#{reviewCommentId}
	</update>

	<delete id="deleteReviewComment" parameterType="int">
		DELETE FROM
		review_post_comments
		WHERE comments_id=${reviewCommentId}
	</delete>

	<select id="getTotalReviewPostCountById" resultType="int">
		SELECT
		COUNT(*)
		FROM review_post
		WHERE user_id=#{userId};
	</select>

	<select id="getReviewBoardByViewCount" resultType="map">
		SELECT
		rp.review_post_id AS reviewPostId,
		rp.title,
		rp.post_html AS postHtml,
		rp.portfolio_html AS portfolioHtml,
		rp.view_count AS viewCount,
		rp.create_date AS createDate,
		rp.like_count AS likeCount,
		u.user_id AS
		"user.userId",
		u.nickname AS "user.nickname"
		FROM review_post rp
		JOIN
		users u ON rp.user_id = u.user_id
		ORDER BY rp.view_count DESC
		LIMIT 9
	</select>
	
	<update id="updateReviewPostLike">
		UPDATE review_post
		SET like_count=like_count+1
		WHERE review_post_id=#{reviewPostId}
	</update>
	
	<select id="selectLikeCountByReviewPostId" resultType="int">
			SELECT like_count FROM review_post WHERE review_post_id=${reviewPostId}
	</select>

	<select id="getReviewCommentById" parameterType="int"
		resultType="org.kosa._musketeers.domain.ReviewPostComment">
		SELECT c.comments_id, c.comments_contents, c.comments_date,
		c.review_post_id, u.user_id, u.nickname, u.email /* 등 필요한 컬럼들 */
		FROM review_post_comment c
		JOIN user u ON c.user_id = u.user_id
		WHERE c.comments_id = #{commentsId}
	</select>


</mapper>